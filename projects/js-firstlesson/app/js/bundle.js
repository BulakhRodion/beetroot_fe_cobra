(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

//Запросите у пользователя его имя и выведите в ответ: «Привет, его имя!».
var NAME = prompt("Enter your name");
alert('Привет,' + ' ' + NAME + '!'); // Запросите у пользователя год его рождения, посчитайте, сколько ему лет и выведите результат. Текущий год укажите в коде как константу.

var userBirthYear = prompt("Enter your birth year");
var currentYear = 2020;
alert(currentYear - userBirthYear); // Запросите у пользователя длину стороны квадрата и выведите периметр такого квадрата.

var squareSideLength = prompt("Enter side length of a square to get perimiter");
alert(squareSideLength * 4); // Запросите у пользователя радиус окружности и выведите площадь такой окружности.

var circleArea = prompt("Enter circle radius to get it's area");
alert(Math.pow(circleArea, 2) * 3.1415); // Запросите у пользователя расстояние в км между двумя городами и за сколько часов он хочет добраться. Посчитайте скорость, с которой необходимо двигаться, чтобы успеть вовремя.

var roadDistance = prompt("Enter road distance in km");
var roadTime = prompt("Enter time (in hours) you want to cross this distance to know required movement speed");
alert(roadDistance / roadTime + 'km/h'); // Реализуйте конвертор валют. Пользователь вводит доллары, программа переводит в евро. Курс валюты храните в константе.

var amountDollar = prompt("Enter you dollar('s) amount");
var valueEuro = 0.8412;
alert(amountDollar * valueEuro); // Пользователь указывает объем флешки в Гб. Программа должна посчитать, сколько файлов размером в 820 Мб помещается на флешку.

var fleshCardSpace = prompt("Enter your card space in GB");
alert(fleshCardSpace / 0.820); // Пользователь вводит сумму денег в кошельке и цену одной шоколадки. Программа выводит, сколько шоколадок может купить пользователь, и сколько сдачи у него останется.

var walletMoney = prompt("Enter amount of money in your wallet");
var chocolatePrice = prompt("Enter chocolate price");
var chocolateAmount = walletMoney / chocolatePrice;
var moneyRest = walletMoney % chocolatePrice;
alert(chocolateAmount + ' ' + moneyRest + ' ' + 'остаток'); // Запросите у пользователя трехзначное число и выведите его задом наперед. Для решения задачи вам понадобится оператор % (остаток от деления).

var a = prompt("Enter any three-digit number to reverse it");
var b, c, d;
var result = 0;
b = String(a % 10);
a = (a - b) / 10;
c = String(a % 10);
a = (a - c) / 10;
d = String(a % 10);
result = b + c + d;
alert(result); // Пользователь вводит сумму вклада в банк на 2 месяца, с процентной ставкой депозита 5% годовых. Вывести сумму начисленных процентов.

var amountDeposit = prompt("Enter your deposit amount");
var persentYearDeposit = 0.05;
var amountTwoMonth = 0;
amountTwoMonth = amountDeposit * persentYearDeposit * 61 / 365;
alert(amountTwoMonth);

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
